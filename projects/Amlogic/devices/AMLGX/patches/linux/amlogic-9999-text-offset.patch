diff -Nur a/arch/arm64/include/asm/boot.h b/arch/arm64/include/asm/boot.h
--- a/arch/arm64/include/asm/boot.h	2024-03-11 04:38:09.000000000 +0800
+++ b/arch/arm64/include/asm/boot.h	2024-09-03 12:59:53.399757109 +0800
@@ -13,7 +13,8 @@
 #define MAX_FDT_SIZE		SZ_2M
 
 /*
- * arm64 requires the kernel image to placed at a 2 MB aligned base address
+ * arm64 requires the kernel image to placed
+ * TEXT_OFFSET bytes beyond a 2 MB aligned base
  */
 #define MIN_KIMG_ALIGN		SZ_2M
 
diff -Nur a/arch/arm64/include/asm/kernel-pgtable.h b/arch/arm64/include/asm/kernel-pgtable.h
--- a/arch/arm64/include/asm/kernel-pgtable.h	2024-03-11 04:38:09.000000000 +0800
+++ b/arch/arm64/include/asm/kernel-pgtable.h	2024-09-03 13:03:15.011343838 +0800
@@ -68,7 +68,7 @@
 			+ EARLY_PGDS((vstart), (vend), add) 	/* each PGDIR needs a next level page table */	\
 			+ EARLY_PUDS((vstart), (vend), add)	/* each PUD needs a next level page table */	\
 			+ EARLY_PMDS((vstart), (vend), add))	/* each PMD needs a next level page table */
-#define INIT_DIR_SIZE (PAGE_SIZE * EARLY_PAGES(KIMAGE_VADDR, _end, EXTRA_PAGE))
+#define INIT_DIR_SIZE (PAGE_SIZE * EARLY_PAGES(KIMAGE_VADDR + TEXT_OFFSET, _end, EXTRA_PAGE))
 
 /* the initial ID map may need two extra pages if it needs to be extended */
 #if VA_BITS < 48
diff -Nur a/arch/arm64/include/asm/memory.h b/arch/arm64/include/asm/memory.h
--- a/arch/arm64/include/asm/memory.h	2024-03-11 04:38:09.000000000 +0800
+++ b/arch/arm64/include/asm/memory.h	2024-09-03 13:18:05.186868854 +0800
@@ -220,12 +220,15 @@
 /* PHYS_OFFSET - the physical address of the start of memory. */
 #define PHYS_OFFSET		({ VM_BUG_ON(memstart_addr & 1); memstart_addr; })
 
+/* the virtual base of the kernel image (minus TEXT_OFFSET) */
+extern u64			kimage_vaddr;
+
 /* the offset between the kernel virtual and physical mappings */
 extern u64			kimage_voffset;
 
-static inline unsigned long kaslr_offset(void)
+static inline unsigned long kaslr_offset(void) 
 {
-	return (u64)&_text - KIMAGE_VADDR;
+	return kimage_vaddr - KIMAGE_VADDR;
 }
 
 #ifdef CONFIG_RANDOMIZE_BASE
diff -Nur a/arch/arm64/kernel/head.S b/arch/arm64/kernel/head.S
--- a/arch/arm64/kernel/head.S	2024-03-11 04:38:09.000000000 +0800
+++ b/arch/arm64/kernel/head.S	2024-09-03 13:14:22.169845130 +0800
@@ -37,6 +37,8 @@
 
 #include "efi-header.S"
 
+#define __PHYS_OFFSET  (KERNEL_START - TEXT_OFFSET)
+
 #if (PAGE_OFFSET & 0x1fffff) != 0
 #error PAGE_OFFSET must be at least 2MB aligned
 #endif
@@ -49,6 +51,9 @@
  *   MMU = off, D-cache = off, I-cache = on or off,
  *   x0 = physical address to the FDT blob.
  *
+ * This code is mostly position independent so you call this at
+ * __pa(PAGE_OFFSET + TEXT_OFFSET).
+ *
  * Note that the callee-saved registers are used for storing variables
  * that are useful before the MMU is enabled. The allocations are described
  * in the entry routines.
@@ -59,7 +64,7 @@
 	 */
 	efi_signature_nop			// special NOP to identity as PE/COFF executable
 	b	primary_entry			// branch to kernel start, magic
-	.quad	0				// Image load offset from start of RAM, little-endian
+	le64sym	_kernel_offset_le		// Image load offset from start of RAM, little-endian
 	le64sym	_kernel_size_le			// Effective size of kernel image, little-endian
 	le64sym	_kernel_flags_le		// Informative flags, little-endian
 	.quad	0				// reserved
@@ -422,7 +427,7 @@
 
 SYM_FUNC_START_LOCAL(create_kernel_mapping)
 	adrp	x0, init_pg_dir
-	mov_q	x5, KIMAGE_VADDR		// compile time __va(_text)
+	mov_q	x5, KIMAGE_VADDR + TEXT_OFFSET		// compile time __va(_text)
 #ifdef CONFIG_RELOCATABLE
 	add	x5, x5, x23			// add KASLR displacement
 #endif
@@ -467,7 +472,7 @@
 /*
  * The following fragment of code is executed with the MMU enabled.
  *
- *   x0 = __pa(KERNEL_START)
+ *   x0 = __PHYS_OFFSET
  */
 SYM_FUNC_START_LOCAL(__primary_switched)
 	adr_l	x4, init_task
@@ -482,7 +487,7 @@
 
 	str_l	x21, __fdt_pointer, x5		// Save FDT pointer
 
-	adrp	x4, _text			// Save the offset between
+	ldr_l	x4, kimage_vaddr		// Save the offset between
 	sub	x4, x4, x0			// the kernel virtual and
 	str_l	x4, kimage_voffset, x5		// physical mappings
 
@@ -524,6 +529,13 @@
 	ASM_BUG()
 SYM_FUNC_END(__primary_switched)
 
+        .pushsection ".rodata", "a"
+ SYM_DATA_START(kimage_vaddr)
+        .quad           _text - TEXT_OFFSET
+ SYM_DATA_END(kimage_vaddr)
+ EXPORT_SYMBOL(kimage_vaddr)
+        .popsection
+
 /*
  * end early head section, begin head code that is also used for
  * hotplug and needs to have the same protections as the text region
@@ -875,7 +887,7 @@
 	adrp	x2, init_idmap_pg_dir
 	bl	__enable_mmu
 #ifdef CONFIG_RELOCATABLE
-	adrp	x23, KERNEL_START
+	adrp	x23, __PHYS_OFFSET
 	and	x23, x23, MIN_KIMG_ALIGN - 1
 #ifdef CONFIG_RANDOMIZE_BASE
 	mov	x0, x22
@@ -897,6 +909,6 @@
 	bl	__relocate_kernel
 #endif
 	ldr	x8, =__primary_switched
-	adrp	x0, KERNEL_START		// __pa(KERNEL_START)
+	adrp	x0, __PHYS_OFFSET
 	br	x8
 SYM_FUNC_END(__primary_switch)
diff -Nur a/arch/arm64/kernel/image.h b/arch/arm64/kernel/image.h
--- a/arch/arm64/kernel/image.h	2024-03-11 04:38:09.000000000 +0800
+++ b/arch/arm64/kernel/image.h	2024-09-03 12:59:53.402756651 +0800
@@ -62,6 +62,7 @@
  */
 #define HEAD_SYMBOLS						\
 	DEFINE_IMAGE_LE64(_kernel_size_le, _end - _text);	\
+	DEFINE_IMAGE_LE64(_kernel_offset_le, TEXT_OFFSET);	\
 	DEFINE_IMAGE_LE64(_kernel_flags_le, __HEAD_FLAGS);
 
 #endif /* __ARM64_KERNEL_IMAGE_H */
diff -Nur a/arch/arm64/kernel/Makefile b/arch/arm64/kernel/Makefile
--- a/arch/arm64/kernel/Makefile	2024-03-11 04:38:09.000000000 +0800
+++ b/arch/arm64/kernel/Makefile	2024-09-03 12:59:53.401756804 +0800
@@ -2,7 +2,8 @@
 #
 # Makefile for the linux kernel.
 #
-
+CPPFLAGS_vmlinux.lds	:= -DTEXT_OFFSET=$(TEXT_OFFSET)
+AFLAGS_head.o		:= -DTEXT_OFFSET=$(TEXT_OFFSET)
 CFLAGS_armv8_deprecated.o := -I$(src)
 
 CFLAGS_REMOVE_ftrace.o = $(CC_FLAGS_FTRACE)
diff -Nur a/arch/arm64/kernel/setup.c b/arch/arm64/kernel/setup.c
--- a/arch/arm64/kernel/setup.c	2024-03-11 04:38:09.000000000 +0800
+++ b/arch/arm64/kernel/setup.c	2024-09-03 12:59:53.402756651 +0800
@@ -335,13 +335,6 @@
 	xen_early_init();
 	efi_init();
 
-	if (!efi_enabled(EFI_BOOT)) {
-		if ((u64)_text % MIN_KIMG_ALIGN)
-			pr_warn(FW_BUG "Kernel image misaligned at boot, please fix your bootloader!");
-		WARN_TAINT(mmu_enabled_at_boot, TAINT_FIRMWARE_WORKAROUND,
-			   FW_BUG "Booted with MMU enabled!");
-	}
-
 	arm64_memblock_init();
 
 	paging_init();
diff -Nur a/arch/arm64/kernel/vmlinux.lds.S b/arch/arm64/kernel/vmlinux.lds.S
--- a/arch/arm64/kernel/vmlinux.lds.S	2024-03-11 04:38:09.000000000 +0800
+++ b/arch/arm64/kernel/vmlinux.lds.S	2024-09-03 12:59:53.402756651 +0800
@@ -164,7 +164,7 @@
 		*(.dynsym .dynstr .hash .gnu.hash)
 	}
 
-	. = KIMAGE_VADDR;
+	. = KIMAGE_VADDR + TEXT_OFFSET;
 
 	.head.text : {
 		_text = .;
@@ -368,7 +368,7 @@
 /*
  * If padding is applied before .head.text, virt<->phys conversions will fail.
  */
-ASSERT(_text == KIMAGE_VADDR, "HEAD is misaligned")
+ASSERT(_text == (KIMAGE_VADDR + TEXT_OFFSET), "HEAD is misaligned")
 
 ASSERT(swapper_pg_dir - reserved_pg_dir == RESERVED_SWAPPER_OFFSET,
        "RESERVED_SWAPPER_OFFSET is wrong!")
diff -Nur a/arch/arm64/Makefile b/arch/arm64/Makefile
--- a/arch/arm64/Makefile	2024-03-11 04:38:09.000000000 +0800
+++ b/arch/arm64/Makefile	2024-09-03 12:59:53.399757109 +0800
@@ -11,6 +11,7 @@
 # Copyright (C) 1995-2001 by Russell King
 
 LDFLAGS_vmlinux	:=--no-undefined -X
+CPPFLAGS_vmlinux.lds = -DTEXT_OFFSET=$(TEXT_OFFSET)
 
 ifeq ($(CONFIG_RELOCATABLE), y)
 # Pass --no-apply-dynamic-relocs to restore pre-binutils-2.27 behaviour
@@ -134,6 +135,10 @@
   CC_FLAGS_FTRACE := -fpatchable-function-entry=2
 endif
 
+# The byte offset of the kernel image in RAM from the start of RAM.
+TEXT_OFFSET := 0x01080000
+export TEXT_OFFSET
+
 ifeq ($(CONFIG_KASAN_SW_TAGS), y)
 KASAN_SHADOW_SCALE_SHIFT := 4
 else ifeq ($(CONFIG_KASAN_GENERIC), y)
diff -Nur a/drivers/firmware/efi/libstub/arm64-stub.c b/drivers/firmware/efi/libstub/arm64-stub.c
--- a/drivers/firmware/efi/libstub/arm64-stub.c	2024-03-11 04:38:09.000000000 +0800
+++ b/drivers/firmware/efi/libstub/arm64-stub.c	2024-09-03 13:00:01.741496592 +0800
@@ -22,6 +22,8 @@
 				 efi_handle_t image_handle)
 {
 	efi_status_t status;
+	u64 min_kimg_align = efi_get_kimg_min_align();
+
 	unsigned long kernel_size, kernel_codesize, kernel_memsize;
 
 	if (image->image_base != _text) {
@@ -36,7 +38,7 @@
 	kernel_size = _edata - _text;
 	kernel_codesize = __inittext_end - _text;
 	kernel_memsize = kernel_size + (_end - _edata);
-	*reserve_size = kernel_memsize;
+	*reserve_size = kernel_memsize + TEXT_OFFSET % min_kimg_align;
 	*image_addr = (unsigned long)_text;
 
 	status = efi_kaslr_relocate_kernel(image_addr,
diff -Nur a/drivers/firmware/efi/libstub/kaslr.c b/drivers/firmware/efi/libstub/kaslr.c
--- a/drivers/firmware/efi/libstub/kaslr.c	2024-03-11 04:38:09.000000000 +0800
+++ b/drivers/firmware/efi/libstub/kaslr.c	2024-09-03 13:00:01.742496442 +0800
@@ -129,7 +129,7 @@
 	if (status != EFI_SUCCESS) {
 		if (!check_image_region(*image_addr, kernel_memsize)) {
 			efi_err("FIRMWARE BUG: Image BSS overlaps adjacent EFI memory region\n");
-		} else if (IS_ALIGNED(*image_addr, min_kimg_align) &&
+		} else if (IS_ALIGNED(*image_addr - TEXT_OFFSET, min_kimg_align) &&
 			   (unsigned long)_end < EFI_ALLOC_LIMIT) {
 			/*
 			 * Just execute from wherever we were loaded by the
@@ -151,7 +151,7 @@
 	}
 
 	memcpy((void *)*reserve_addr, (void *)*image_addr, kernel_size);
-	*image_addr = *reserve_addr;
+	*image_addr = *reserve_addr + TEXT_OFFSET % min_kimg_align;;
 	efi_icache_sync(*image_addr, *image_addr + kernel_codesize);
 	efi_remap_image(*image_addr, *reserve_size, kernel_codesize);
 
diff -Nur a/drivers/firmware/efi/libstub/Makefile b/drivers/firmware/efi/libstub/Makefile
--- a/drivers/firmware/efi/libstub/Makefile	2024-03-11 04:38:09.000000000 +0800
+++ b/drivers/firmware/efi/libstub/Makefile	2024-09-03 13:00:01.741496592 +0800
@@ -93,6 +93,8 @@
 lib-$(CONFIG_LOONGARCH)		+= loongarch.o loongarch-stub.o
 
 CFLAGS_arm32-stub.o		:= -DTEXT_OFFSET=$(TEXT_OFFSET)
+CFLAGS_arm64-stub.o		:= -DTEXT_OFFSET=$(TEXT_OFFSET)
+CFLAGS_kaslr.o			:= -DTEXT_OFFSET=$(TEXT_OFFSET)
 
 zboot-obj-$(CONFIG_RISCV)	:= lib-clz_ctz.o lib-ashldi3.o
 lib-$(CONFIG_EFI_ZBOOT)		+= zboot.o $(zboot-obj-y)
